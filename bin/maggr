#!/usr/bin/env node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

/*
 * maggr
 * a command-line aggregation tool
 */

var carrier = require('carrier');
var events = require('events');
var EventEmitter = events.EventEmitter;
var getopt = require('posix-getopt');
var util = require('util');
var fs = require('fs');
var printf = require('printf');

var OPS = {
	key:    { deps: [] },
	nop:    { deps: [] },

	count:  { deps: [] },
	max:    { deps: [] },
	mean:   { deps: ['sum', 'count'] },
	min:    { deps: [] },
	range:  { deps: ['min', 'max'] },
	sum:    { deps: [] },
	ovariance:   { deps: [] },
	variance:    { deps: ['buffer', 'sum', 'count'] },
	stddev: { deps: ['buffer', 'sum', 'count'] }
};

var msUsage = [
	'USAGE:	maggr	[-c#=<op list> -c#=<op list> ...]',
	'		[-t#=<format list> -t#=<format list> ...]',
	'		[-f file] [-d input delimiter] [-o output delimiter]',
	'		[-T format list]',
	'		[-i inner output delimiter] [op list]',
	'	maggr	-l',
	'Example: maggr -d ":" -o "-" -c1=key -c3=nop sum,mean',
	'',
	'-f	read from file instead of reading from stdin',
	'',
	'-c#<op list>	specify a list of operations to perform on column #',
	'		columns start at 1',
	'		multiple operations are separated by commas (,)',
	'',
	'-t#<fmt list>   specify a list format patterns to perform on column #',
	'		columns start at 1',
	'		multiple formats are separated by commas (,)',
	'',
	'-d	string that separates columns in the input',
	'',
	'-o	string that separates columns in the output',
	'',
	'-T	string that represents list of format patterns for output',
	'',
	'-i	string that separates results for a single column when',
	'	multiple operations are specified',
	'',
	'-l	lists supported operations',
	'',
	'Performs key-wise aggregation on plain text files.',
	'',
	'Specify aggregation operations on columns. Specify operations for',
	'each column using -c#=<op list>, replacing # with the column number.',
	'The first column is column 1, awk style. Multiple operations can be',
	'specified by separating them with commas. e.g. -c2=sum,mean.',
	'Specify operations to be performed on all other columns after all',
	'arguments.',
	'',
	'Specify printf style format patterns on columns.  Specify patterns',
	'for each column using -t#=<pattern list>, replacing # with a column.',
	'Multiple patterns can be specified for a single column that has',
	'multiple operations by separating them with commas. e.g.',
	'-t2=%2d,%0.2f. Output formats for a single column can be skipped:',
	'-t2=,%0.2f. All other output will be formatted according to the -T',
	'option (or left unformatted if -T is unspecified). ',
	'',
	'Specify key columns using the "key" operation. Columns can be ignored',
	'with the "nop" operation.',
	'',
	'Columns from input are parsed using the string specified with the',
	'-d option or by spaces.',
	'',
	'Results are printed by key. Each aggregated result is printed in the',
	'same order as the input, including the keys. Columns are separated by',
	'the delimiter specified by the -o option, otherwise by the input',
	'delimiter. If multiple operations were specified for a single column,',
	'results will be printed in the same order they were specified and',
	'separated by the delimiter specified by the -i option, otherwise by',
	'commas.',
	'',
	'If [op list] is not specified and a column definition isn\'t',
	'specifically given, then column definition wil default to nop.'
].join('\n');

function usage(errstring) {
	console.warn('Error: ' + errstring);
	console.warn(msUsage);
	process.exit(2);
}


function sum(value, aggr) {
	aggr.sum = aggr.sum || {};
	aggr.sum.result = aggr.sum.result + value || value;
}

function mean(aggr) {
	aggr.mean = {
		result: aggr.sum.result / aggr.count.result
	};
}

function ovariance(value, aggr) {
	aggr.ovariance = aggr.ovariance || {n: 0, delta: 0, mean: 0, m2: 0};
	aggr.ovariance.n = aggr.ovariance.n + 1;
	aggr.ovariance.delta = value - aggr.ovariance.mean;
	aggr.ovariance.mean = aggr.ovariance.mean +
		(aggr.ovariance.delta / aggr.ovariance.n);
	aggr.ovariance.m2 = aggr.ovariance.m2 +
		aggr.ovariance.delta * (value - aggr.ovariance.mean);
	aggr.ovariance.result = aggr.ovariance.m2 / (aggr.ovariance.n - 1);
}

function variance(aggr) {
	mean(aggr);
	aggr.sum2 = {
		result: 0
	};

	aggr.buffer.values.forEach(function (v) {
		aggr.sum2.result = aggr.sum2.result +
			(v - aggr.mean.result)*(v - aggr.mean.result);
	});

	aggr.variance = {
		result: aggr.sum2.result / (aggr.count.result - 1)
	};

	aggr.stddev = {
		result: Math.sqrt(aggr.variance.result)
	};
}

function count(aggr) {
	aggr.count = aggr.count || {};
	aggr.count.result = aggr.count.result + 1 || 1;
}

function range(aggr) {
	aggr.range = aggr.range || {};
	aggr.range.result = Math.abs(aggr.max.result - aggr.min.result);
}

function min(value, aggr) {
	aggr.min = aggr.min || {};
	aggr.min.result = aggr.min.result === undefined ?
		value :
		Math.min(aggr.min.result, value);
}

function max(value, aggr) {
	aggr.max = aggr.max || {};
	aggr.max.result = aggr.max.result === undefined ?
		value :
		Math.max(aggr.max.result, value);
}

function buffer(value, aggr) {
	aggr.buffer = aggr.buffer || {};
	aggr.buffer.values = aggr.buffer.values || [];
	aggr.buffer.values.push(value);
}

function isNumber(n) {
	return (!isNaN(parseFloat(n)) && isFinite(n));
}

function listOps() {
	return (Object.keys(OPS).join(' '));
}


/*
 * Checks if the ops specified make sense and adds any dependencies.
 */
function processOps(ops) {
	var processedOps = {};

	processedOps.singleOps = {}; // operations that have no dependencies

	processedOps.postOps = {};  // operations that must be performed after
				    // other ones, i.e. they have dependencies

	processedOps.outputOps = {}; // operations that the user explicitly
				     // requested to be performed

	ops.forEach(function (op) {
		if (op === 'key' && ops.length > 1) {
			usage('no other operations can be specified ' +
				'for a column marked as a key');
		}

		if (op === 'nop' && ops.length > 1) {
			usage('no other operations can be specified ' +
				'for a column marked nop');
		}

		if (!OPS[op])  {
			usage('unsupported operation: ' + op);
		}

		if (OPS[op].deps.length === 0) {
			processedOps.singleOps[op] = true;
		} else {
			OPS[op].deps.forEach(function (dependency) {
				processedOps.singleOps[dependency] = true;
			});
			processedOps.postOps[op] = true;
		}

		processedOps.outputOps[op] = true;
	});
	return (processedOps);
}


function getOpts(argv) {
	var opts = {};
	opts.ops = [];
	opts.fmts = [];
	var option, split, column, fmts, ops;

	var parser = new getopt.BasicParser(':d:o:i:c:f:t:T:l', argv);
	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
		case 'd':
			opts.inputDelimiter = option.optarg;
			break;
		case 'o':
			opts.outputDelimiter = option.optarg;
			break;
		case 'i':
			opts.innerDelimiter = option.optarg;
			break;
		case 'c':
			split = option.optarg.split('=');
			if (!isNumber(split[0])) {
				usage('invalid column number: ' + split[0]);
			}
			if (split.length !== 2) {
				usage('invalid column format: ' +
				      option.optarg);
			}

			// columns are numbered from 1, awk style
			column = parseInt(split[0], 10) - 1;
			if (column < 0) {
				usage('invalid column number');
			}
			ops = split[1].split(',');
			opts.ops[column] = processOps(ops);
			if ('key' in opts.ops[column]) {
				opts.ops.explicitKey = true;
			}
			break;
		case 'f':
			opts.inputFile = option.optarg;
			break;
		case 't':
			split = option.optarg.split('=');
			if (!isNumber(split[0])) {
				usage('invalid column number: ' + split[0]);
			}

			// columns are numbered from 1, awk style
			column = parseInt(split[0], 10) - 1;
			if (column < 0) {
				usage('invalid column number: ' +
				      option.optarg);
			}
			fmts = split[1].split(',');
			opts.fmts[column] = fmts;
			break;
		case 'T':
			fmts = option.optarg.split(',');
			opts.fmts.global = fmts;
			break;
		case 'l':
			console.warn(listOps());
			process.exit(0);
			break;
		default:
			break;
		}
	}

	if (parser.optind() >= process.argv.length && opts.ops.length <= 0) {
		if (opts.ops.length <= 0) {
			usage('no operations specified');
		}
	}

	if (parser.optind() < process.argv.length) {
		var globalOps = process.argv[parser.optind()].split(',');
		opts.ops.global = processOps(globalOps);
		if ('key' in opts.ops.global) {
			opts.ops.explicitKey = true;
		}
	} else {
		// No ops list, default everything to nop
		opts.ops.global = processOps(['nop']);
	}

	opts.inputDelimiter = opts.inputDelimiter || ' ';
	opts.outputDelimiter = opts.outputDelimiter ||
		opts.inputDelimiter || ' ';
	opts.innerDelimiter = opts.innerDelimiter || ',';
	return (opts);
}


/*
 * Parses a single line of input into a key and values.
 * Each line is split into columns. Each column is added to the key or the
 * values array depending on the operation specified for that column.
 */
function lineParse(delim, ops, input) {
	var e = new EventEmitter();
	var carry;
	if (input) {
		carry = carrier.carry(fs.createReadStream(input,
			{ encoding: 'utf8' }));
	} else {
		carry = carrier.carry(process.openStdin());
	}

	function onLine(line) {
		var columns = line.split(delim);
		var key = '';
		var values = [];
		var invalid = false;
		var invalidColumn = null;
		for (var col = 0; col < columns.length; col++) {
			var colOps = ops[col] || ops.global;

			// use this column as part of the aggregation key
			if ('key' in colOps.singleOps) {
				key += columns[col];
				values[col] = columns[col];
			} else if ('nop' in colOps.singleOps) {
				values[col] = columns[col];
			} else {
				var num = parseFloat(columns[col]);
				if (isNaN(num)) {
					invalid = true;
					invalidColumn = col + 1;
					break;
				}
				values[col] = num;
			}
		}
		if (!invalid) {
			e.emit('line', key, values);
		} else {
			e.emit('invalidline',
			       { line: line, column: invalidColumn });
		}
	}

	carry.on('line', onLine);
	carry.on('error', e.emit.bind(e, 'error'));
	carry.once('end', e.emit.bind(e, 'end'));
	return (e);
}


/*
 * Prints the result object.
 * Each key and it's aggregated columns are formatted and printed on a line.
 * Columns are separated by opts.outputDelimiter
 * If multiple operations were specfied for a column, the results are separated
 * by opts.innerDelimiter.
 */
function printResults(results, ops, fmts, delim, ifs) {
	Object.keys(results).forEach(function (key) {
		var line = '';
		for (var val = 0; val < results[key].length; val++) {
			var colOps = ops[val] || ops.global;
			var colFmts = fmts[val] || fmts.global;
			//colOps is the ops list for each column of data
			//colFmts is the format list for each column of data

			if ('nop' in colOps.outputOps) {
				continue;
			}

			var fmtsIndex = 0;
			Object.keys(colOps.outputOps).forEach(function (op) {
				var result;
				var unfmt_result =
					results[key][val][op].result.toString();
				if (colFmts === undefined || op === 'key') {
					result = unfmt_result;
				} else if (!colFmts[fmtsIndex]) {
					if (fmts.global === undefined) {
						result = unfmt_result;
					} else {
						result = printf(fmts.global,
							unfmt_result);
					}
				} else {
					result = printf(colFmts[fmtsIndex],
						unfmt_result);
				}
				fmtsIndex += 1;
				line += result + ifs;
			});

			line = line.substring(0, line.lastIndexOf(ifs));
			line += delim;
		}
		line = line.substring(0, line.lastIndexOf(delim));
		console.log(line);
	});
}


function main() {
	var opts = getOpts(process.argv);
	var lineParser = lineParse(opts.inputDelimiter, opts.ops,
		opts.inputFile);
	var results = {};
	var exitStatus = 0;

	lineParser.on('line', function (key, values) {
		results[key] = results[key] || [];
		for (var val = 0; val < values.length; val++) {
			if (val >= results[key].length) {
				results[key].push({});
			}
			var ops = opts.ops[val] || opts.ops.global;
			var aggr = results[key][val];
			var value = values[val];

			Object.keys(ops.singleOps).forEach(function (op) {
				switch (op) {
				case 'sum':
					sum(value, aggr);
					break;
				case 'count':
					count(aggr);
					break;
				case 'max':
					max(value, aggr);
					break;
				case 'min':
					min(value, aggr);
					break;
				case 'ovariance':
				    ovariance(value, aggr);
				    break;
				case 'buffer':
					buffer(value, aggr);
					break;
				case 'key':
					aggr.key = {
						result: value
					};
					break;
				default:
					break;
				}
			});

		}
	});

	lineParser.on('invalidline', function (lineDetails) {
		console.error('Non-number in non-key ' +
			      'column ' + lineDetails.column +
			      '. line: ' + lineDetails.line);
		exitStatus = 1;
	});

	lineParser.once('end', function () {
		Object.keys(results).forEach(function (key) {
			for (var val = 0; val < results[key].length; val++) {
				var ops = opts.ops[val] || opts.ops.global;
				var aggr = results[key][val];

				Object.keys(ops.postOps).forEach(function (op) {
					switch (op) {
					case 'mean':
						mean(aggr);
						break;
					case 'variance':
						variance(aggr);
						break;
					case 'stddev':
						variance(aggr);
						break;
					case 'range':
						range(aggr);
						break;
					default:
						break;
					}
				});

			}
		});
		printResults(results, opts.ops, opts.fmts, opts.outputDelimiter,
			opts.innerDelimiter);
		process.exit(exitStatus);
	});
}

if (require.main === module) {
	main();
}

module.exports = {
	count: count,
	max: max,
	mean: mean,
	ovariance: ovariance,
	variance: variance,
	min: min,
	range: range,
	sum: sum
};
