#!/usr/node/bin/node
// -*- mode: js -*-
// Copyright (c) 2013, Joyent, Inc. All rights reserved.

var mod_assert = require('assert');
var mod_bunyan = require('bunyan');
var mod_fs = require('fs');
var mod_getopt = require('posix-getopt');
var mod_manta = require('manta');

/*
 * mtee: demux streams to send to multiple reducers
 */
var msUsageMessage = [
	'usage: mtee [manta_key] [-t output_file]',
	'',
	'mtee is used to capture stdin and write to both stdout and a manta',
	'object.  For example, this will capture the output of cmd to manta',
	'object /$MANTA_USER/stor/tee.out and still pipe what was coming from',
	'cmd to cmd2:',
	'  $ cmd | mtee /$MANTA_USER/stor/tee.out | cmd2',
	'',
	'To test mtee, use the -t [output file] option which will output to',
	'both stdout and to the file, but leave the file on the local',
	'filesystem and not upload to manta.  If the -t option is used, the',
	'manta_key will be ignored.'
].join('\n');

var mtHeaders = {};
var mtKey = null;
var mtTestMode = false;
var mtTmpFile = '/var/tmp/mtee.' + process.pid;

function main() {
	var option;
	var parser = new mod_getopt.BasicParser('H:t:', process.argv);

	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {

		case 'H':
			if (option.optarg.indexOf(': ') === -1) {
				usage('headers must be in the format of: ' +
				      '[header] + ": " + [value]');
			}
			var p = option.optarg.split(': ');
			mtHeaders[p[0]] = p.slice(1).join(': ');
			break;

		case 't':
			mtTestMode = true;
			if (option.optarg) {
				mtTmpFile = option.optarg;
			}
			break;

		default:
			/* error message already emitted by getopt */
			mod_assert.equal('?', option.option);
			usage();
			break;
		}
	}

	if (parser.optind() < process.argv.length) {
		mtKey = process.argv[parser.optind()];
	}

	if (!mtKey && !mtTestMode) {
		console.error('A manta object key must be specified.');
		usage();
	}

	if (!mtTestMode) {
		try {
			mod_manta.checkBinEnv({});
		} catch (err) {
			usage(err.message);
		}
	}

	var stream = mod_fs.createWriteStream(mtTmpFile);
	stream.once('open', function (fd) {
		process.stdin.pipe(stream);
		process.stdin.pipe(process.stdout);
		process.stdin.resume();
	});

	stream.once('error', function (err) {
		mtFatal(err);
	});

	stream.once('close', function () {
		if (!mtTestMode) {
			mtUploadFile();
		}
	});

	process.stdin.once('end', function () {
		stream.end();
	});
}

function usage(message)
{
	if (message) {
		console.error(message);
	}
	console.error(msUsageMessage);
	process.exit(2);
}

function mtFatal(message)
{
	console.error(message);
	process.exit(1);
}

function mtUploadFile()
{
	var log = new mod_bunyan({ 'name': 'mtee',
				    'level': 'fatal',
				    'stream': process.stderr
				     });

	var client = mod_manta.createBinClient({
		'log': log
	});
	var opts = {
		copies: 1,
		headers: mtHeaders
	};

	mod_fs.stat(mtTmpFile, function (err, stats) {
		if (err) {
			mtFatal(err.message);
		}

		if (!stats.isFile()) {
			console.error(mtTmpFile + ' is not a file');
			process.exit(1);
		}

		opts.size = stats.size;
		var fstream = mod_fs.createReadStream(mtTmpFile);
		fstream.pause();
		fstream.on('open', function () {
			client.put(mtKey, fstream, opts, function (err2) {
				if (err2) {
					mtFatal(err2.message);
				}
				mod_fs.unlink(mtTmpFile, function (err3) {
					if (err3) {
						mtFatal(err3.message);
					}
					process.exit(0);
				});
			});
		});
	});
}

main();
